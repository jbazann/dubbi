---
---

<template id="tty-loading-indicator-template">
    <span id="tty-loading-indicator"></span>
</template>

<script>
    import { eventHandler } from "@lib/_events"
    import { pageId } from "@lib/globals"
    import { err, log } from "@lib/log"


    let pageContainer = document.getElementById(pageId) as HTMLDivElement
    !pageContainer && err(`Page container ${pageContainer} not found.`)

    const template = document.getElementById('tty-loading-indicator-template') as HTMLTemplateElement

    eventHandler('astro:after-swap', (_event) => {
        pageContainer = document.getElementById(pageId) as HTMLDivElement
        !pageContainer && err(`Page container ${pageContainer} not found.`)
    })
    
    const symbols = ['—', '\\', '|', '/', '—', '\\', '|', '/']
    const next = (i: number) => (i + 1) % symbols.length
    let index = 0
    const spin = () => {
        span.textContent = symbols.at(index)!
        index = next(index)
    }
    
    const run = () => {
        log("Starting.", "LOADING INDICATOR")
        if (interval) clearInterval(interval)
        interval = setInterval(spin, 1_000 / (symbols.length * 2))
    }

    const stop = () => {
        interval && clearInterval(interval)
        log("Stopping.", "LOADING INDICATOR")
    }
    
    let span = (template.content.cloneNode(true) as Element).firstElementChild!
    let node: Node | null = null
    let interval: any
    const _show = () => {
        log("Showing.", "LOADING INDICATOR")
        node = pageContainer.appendChild(span)
        index = 0
        run()
    }
    const show = (_event: Event) => {
        requestAnimationFrame(_show)
    }
    
    const _hide = () => {
        stop()
        log("Removing.", "LOADING INDICATOR")
        node && pageContainer.removeChild(node)
        node = null
    }
    const hide = (_event: Event) => {
        requestAnimationFrame(_hide)
    }

    eventHandler('tty:loading:start', show)
    eventHandler('tty:loading:end', hide)

</script>