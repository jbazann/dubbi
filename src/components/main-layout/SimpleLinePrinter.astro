---
---

<template id="tty-slp-template">
    <p class="no-bottom-margin whitespace-pre-line"></p>
</template>

<template id="tty-slp-code-template">
    <code class="no-bottom-margin whitespace-pre-line"></code>
</template>

<template id="tty-slp-ls-template">
    <div class="ls-container">
    </div>
</template>

<template id="tty-slp-preface-template">
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="simple-preface"></span><span></span>
    </p>
</template>

<template id="tty-slp-notice-template">
    <hr>
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="notice-preface"></span><span></span>
    </p>
</template>

<template id="tty-slp-error-template">
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="error-preface"></span><span></span>
    </p>
</template>

<template id="tty-slp-cat-img">
    <div class="cat-image-container">
        <img class="cat-image" src="" alt="">
    </div>
</template>

<script>
    import { eventHandler } from "@lib/_events"
    import { newScrollToBottomEvent, dispatch } from "@lib/events"
    import { pageId } from "@lib/globals"
    import { err } from "@lib/log"
    import { t } from "@lib/t"

    let pageContainer = document.getElementById(pageId) as HTMLDivElement
    !pageContainer && err(`Page container ${pageContainer} not found.`)

    const line = document.getElementById('tty-slp-template') as HTMLTemplateElement
    const ls = document.getElementById('tty-slp-ls-template') as HTMLTemplateElement
    const code = document.getElementById('tty-slp-code-template') as HTMLTemplateElement
    const error = document.getElementById('tty-slp-error-template') as HTMLTemplateElement
    const notice = document.getElementById('tty-slp-notice-template') as HTMLTemplateElement
    const preface = document.getElementById('tty-slp-preface-template') as HTMLTemplateElement
    const cat = document.getElementById('tty-slp-cat-img') as HTMLTemplateElement
    
    eventHandler('astro:after-swap', (_event) => {
        pageContainer = document.getElementById(pageId) as HTMLDivElement
        !pageContainer && err(`Page container ${pageContainer} not found.`)
    })

    eventHandler('tty:print', (event) => {
        const newline = line.content.cloneNode(true) as Element
        newline.firstElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:ls', (event) => {
        const newline = ls.content.cloneNode(true) as HTMLDivElement
        (event as CustomEvent).detail.entries.map((e: string) => {
            const p = document.createElement('p')
            p.textContent = `./${e}`
            p.classList.add('ls-entry')
            return p
        }).forEach(newline.firstElementChild!.appendChild.bind(newline.firstElementChild))
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })


    eventHandler('tty:print:code', (event) => {
        const newline = code.content.cloneNode(true) as Element
        newline.firstElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:hr', (_event) => {
        requestAnimationFrame(() => {
            pageContainer.appendChild(document.createElement('hr'))
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:prepare:print:cat', (event) => {
        const img = document.createElement('img') as HTMLImageElement
        (event as CustomEvent).detail.urls.forEach((url: string) => {
            img.src = url
        })
    })

    let firstCat = true
    eventHandler('tty:print:cat', (event) => {
        const img = cat.content.cloneNode(true) as Element
        // For the first time in two years I ran into the reason for semicolons.
        (img.firstElementChild!.firstElementChild as HTMLImageElement).src = (event as CustomEvent).detail.url; // Hilariously enough, it's Typescript's fault.
        (img.firstElementChild!.firstElementChild as HTMLImageElement).alt = (event as CustomEvent).detail.alt
        requestAnimationFrame(() => {
            pageContainer.appendChild(img)
            if (firstCat) {
                firstCat = false
                // Images need some extra time to take up space in the layout.
                // For the first one in particular, the scrollbar may not have appeared yet.
                // This causes an immediate scrollToBottomEvent to fail to keep the scroll at the bottom.
                // Subsequent immages follow the bottom of the container if the scrollbar is already there 
                // (at least in Chromium-based browsers), 
                // since sending a command already scrolls down, that behavior is "guaranteed".
                setTimeout(() => dispatch(newScrollToBottomEvent()), 222)
            } else {
                dispatch(newScrollToBottomEvent())
            }
        })
    })

    eventHandler('tty:print:preface', (event) => {
        const newline = preface.content.cloneNode(true) as Element
        newline.firstElementChild!.firstElementChild!.textContent = (event as CustomEvent).detail.preface
        newline.firstElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:notice', (event) => {
        const newline = notice.content.cloneNode(true) as Element
        newline.lastElementChild!.firstElementChild!.textContent = t('notice.notice-preface')
        newline.lastElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:error', (event) => {
        const newline = error.content.cloneNode(true) as Element
        newline.firstElementChild!.firstElementChild!.textContent = t('notice.error-preface')
        newline.firstElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })
</script>