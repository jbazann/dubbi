---
---

<template id="tty-slp-template">
    <p class="no-bottom-margin whitespace-pre-line"></p>
</template>

<template id="tty-slp-preface-template">
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="simple-preface"></span><span></span>
    </p>
</template>

<template id="tty-slp-notice-template">
    <hr>
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="notice-preface"></span><span></span>
    </p>
</template>

<template id="tty-slp-error-template">
    <p class="no-bottom-margin whitespace-pre-line">
        <span class="error-preface"></span><span></span>
    </p>
</template>

<script>
    import { eventHandler } from "@lib/_events"
    import { newScrollToBottomEvent, dispatch } from "@lib/events"
    import { pageId } from "@lib/globals"
    import { err } from "@lib/log"
    import { t } from "@lib/t"

    let pageContainer = document.getElementById(pageId) as HTMLDivElement
    !pageContainer && err(`Page container ${pageContainer} not found.`)

    const line = document.getElementById('tty-slp-template') as HTMLTemplateElement
    const error = document.getElementById('tty-slp-error-template') as HTMLTemplateElement
    const notice = document.getElementById('tty-slp-notice-template') as HTMLTemplateElement
    const preface = document.getElementById('tty-slp-preface-template') as HTMLTemplateElement
    
    eventHandler('astro:after-swap', (_event) => {
        pageContainer = document.getElementById(pageId) as HTMLDivElement
        !pageContainer && err(`Page container ${pageContainer} not found.`)
    })

    eventHandler('tty:print', (event) => {
        const newline = line.content.cloneNode(true) as Element
        newline.firstElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:hr', (_event) => {
        requestAnimationFrame(() => {
            pageContainer.appendChild(document.createElement('hr'))
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:preface', (event) => {
        const newline = preface.content.cloneNode(true) as Element
        newline.firstElementChild!.firstElementChild!.textContent = (event as CustomEvent).detail.preface
        newline.firstElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:notice', (event) => {
        const newline = notice.content.cloneNode(true) as Element
        newline.lastElementChild!.firstElementChild!.textContent = t('notice.notice-preface')
        newline.lastElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })

    eventHandler('tty:print:error', (event) => {
        const newline = error.content.cloneNode(true) as Element
        newline.firstElementChild!.firstElementChild!.textContent = t('notice.error-preface')
        newline.firstElementChild!.lastElementChild!.textContent = (event as CustomEvent).detail.line
        requestAnimationFrame(() => {
            pageContainer.appendChild(newline)
            dispatch(newScrollToBottomEvent())
        })
    })
</script>